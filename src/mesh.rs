pub fn triangle_count() -> i32 {
  VERTICES.len() as i32 / NUMBERS_PER_VERTEX
}

pub fn vertex_coords() -> (&'static [f32], i32, i32) {
  (&VERTICES, 3, STRIDE)
}

pub fn texture_coords() -> (&'static [f32], i32, i32) {
  (&VERTICES[3..], 2, STRIDE)
}

const NUMBERS_PER_VERTEX: i32 = 5;
const BYTES_PER_F32: i32 = 4;
const STRIDE: i32 = NUMBERS_PER_VERTEX * BYTES_PER_F32;

// X, Y, Z,
// S, T (note: T axis is going from top down)
static VERTICES: [f32; 180] = [
  // Front face.
  -0.5, -0.5, 0.5,
  0.5, 1.0,

  0.5, -0.5, 0.5,
  1.0, 1.0,

  0.5, 0.5, 0.5,
  1.0, 0.5,

  0.5, 0.5, 0.5,
  1.0, 0.5,

  -0.5, 0.5, 0.5,
  0.5, 0.5,

  -0.5, -0.5, 0.5,
  0.5, 1.0,

  // Right face.
  0.5, -0.5, 0.5,
  0.5, 1.0,

  0.5, -0.5, -0.5,
  1.0, 1.0,

  0.5, 0.5, -0.5,
  1.0, 0.5,

  0.5, 0.5, -0.5,
  1.0, 0.5,

  0.5, 0.5, 0.5,
  0.5, 0.5,

  0.5, -0.5, 0.5,
  0.5, 1.0,

  // Back face.
  0.5, -0.5, -0.5,
  0.5, 1.0,

  -0.5, -0.5, -0.5,
  1.0, 1.0,

  -0.5, 0.5, -0.5,
  1.0, 0.5,

  -0.5, 0.5, -0.5,
  1.0, 0.5,

  0.5, 0.5, -0.5,
  0.5, 0.5,

  0.5, -0.5, -0.5,
  0.5, 1.0,

  // Left face.
  -0.5, -0.5, -0.5,
  0.5, 1.0,

  -0.5, -0.5, 0.5,
  1.0, 1.0,

  -0.5, 0.5, 0.5,
  1.0, 0.5,

  -0.5, 0.5, 0.5,
  1.0, 0.5,

  -0.5, 0.5, -0.5,
  0.5, 0.5,

  -0.5, -0.5, -0.5,
  0.5, 1.0,

  // Top face.
  -0.5, 0.5, 0.5,
  0.0, 1.0,

  0.5, 0.5, 0.5,
  0.5, 1.0,

  0.5, 0.5, -0.5,
  0.5, 0.5,

  0.5, 0.5, -0.5,
  0.5, 0.5,

  -0.5, 0.5, -0.5,
  0.0, 0.5,

  -0.5, 0.5, 0.5,
  0.0, 1.0,

  // Bottom face.
  0.5, -0.5, 0.5,
  0.0, 0.5,

  -0.5, -0.5, 0.5,
  0.5, 0.5,

  -0.5, -0.5, -0.5,
  0.5, 0.0,

  -0.5, -0.5, -0.5,
  0.5, 0.0,

  0.5, -0.5, -0.5,
  0.0, 0.0,

  0.5, -0.5, 0.5,
  0.0, 0.5,
];
